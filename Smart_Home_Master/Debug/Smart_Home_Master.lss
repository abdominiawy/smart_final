
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000003ec  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007a  0080007a  0000049a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cb  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000987  00000000  00000000  000017bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000882  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d8  00000000  00000000  000029c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  00002b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000830  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000383c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 37       	cpi	r26, 0x7E	; 126
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  8a:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Cmnd>:

void LCD_Clear()
{
	LCD_Cmnd(0x01);
	_delay_ms(2);
	LCD_Cmnd(0x80);
  92:	9b b3       	in	r25, 0x1b	; 27
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	9b bb       	out	0x1b, r25	; 27
  9e:	c1 98       	cbi	0x18, 1	; 24
  a0:	c3 9a       	sbi	0x18, 3	; 24
  a2:	35 e3       	ldi	r19, 0x35	; 53
  a4:	3a 95       	dec	r19
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Cmnd+0x12>
  a8:	00 00       	nop
  aa:	c3 98       	cbi	0x18, 3	; 24
  ac:	ef e3       	ldi	r30, 0x3F	; 63
  ae:	ff e1       	ldi	r31, 0x1F	; 31
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <LCD_Cmnd+0x1e>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <LCD_Cmnd+0x24>
  b6:	00 00       	nop
  b8:	2b b3       	in	r18, 0x1b	; 27
  ba:	2f 70       	andi	r18, 0x0F	; 15
  bc:	f0 e1       	ldi	r31, 0x10	; 16
  be:	8f 9f       	mul	r24, r31
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	82 2b       	or	r24, r18
  c6:	8b bb       	out	0x1b, r24	; 27
  c8:	c3 9a       	sbi	0x18, 3	; 24
  ca:	35 e3       	ldi	r19, 0x35	; 53
  cc:	3a 95       	dec	r19
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_Cmnd+0x3a>
  d0:	00 00       	nop
  d2:	c3 98       	cbi	0x18, 3	; 24
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9c e9       	ldi	r25, 0x9C	; 156
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_Cmnd+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_Cmnd+0x4c>
  de:	00 00       	nop
  e0:	08 95       	ret

000000e2 <LCD_Init>:
  e2:	8a b3       	in	r24, 0x1a	; 26
  e4:	80 6f       	ori	r24, 0xF0	; 240
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	87 b3       	in	r24, 0x17	; 23
  ea:	8e 60       	ori	r24, 0x0E	; 14
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	c2 98       	cbi	0x18, 2	; 24
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <LCD_Init+0x14>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_Init+0x1e>
 100:	00 00       	nop
 102:	83 e3       	ldi	r24, 0x33	; 51
 104:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 108:	82 e3       	ldi	r24, 0x32	; 50
 10a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 10e:	88 e2       	ldi	r24, 0x28	; 40
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 114:	8c e0       	ldi	r24, 0x0C	; 12
 116:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 126:	08 95       	ret

00000128 <LCD_Char>:
 128:	9b b3       	in	r25, 0x1b	; 27
 12a:	9f 70       	andi	r25, 0x0F	; 15
 12c:	28 2f       	mov	r18, r24
 12e:	20 7f       	andi	r18, 0xF0	; 240
 130:	92 2b       	or	r25, r18
 132:	9b bb       	out	0x1b, r25	; 27
 134:	c1 9a       	sbi	0x18, 1	; 24
 136:	c3 9a       	sbi	0x18, 3	; 24
 138:	35 e3       	ldi	r19, 0x35	; 53
 13a:	3a 95       	dec	r19
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Char+0x12>
 13e:	00 00       	nop
 140:	c3 98       	cbi	0x18, 3	; 24
 142:	ef e3       	ldi	r30, 0x3F	; 63
 144:	ff e1       	ldi	r31, 0x1F	; 31
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <LCD_Char+0x1e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <LCD_Char+0x24>
 14c:	00 00       	nop
 14e:	2b b3       	in	r18, 0x1b	; 27
 150:	2f 70       	andi	r18, 0x0F	; 15
 152:	f0 e1       	ldi	r31, 0x10	; 16
 154:	8f 9f       	mul	r24, r31
 156:	c0 01       	movw	r24, r0
 158:	11 24       	eor	r1, r1
 15a:	82 2b       	or	r24, r18
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	c3 9a       	sbi	0x18, 3	; 24
 160:	35 e3       	ldi	r19, 0x35	; 53
 162:	3a 95       	dec	r19
 164:	f1 f7       	brne	.-4      	; 0x162 <LCD_Char+0x3a>
 166:	00 00       	nop
 168:	c3 98       	cbi	0x18, 3	; 24
 16a:	8f e3       	ldi	r24, 0x3F	; 63
 16c:	9f e1       	ldi	r25, 0x1F	; 31
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Char+0x46>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Char+0x4c>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <LCD_String>:
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	fc 01       	movw	r30, r24
 180:	80 81       	ld	r24, Z
 182:	88 23       	and	r24, r24
 184:	59 f0       	breq	.+22     	; 0x19c <LCD_String+0x24>
 186:	8f 01       	movw	r16, r30
 188:	c0 e0       	ldi	r28, 0x00	; 0
 18a:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Char>
 18e:	cf 5f       	subi	r28, 0xFF	; 255
 190:	f8 01       	movw	r30, r16
 192:	ec 0f       	add	r30, r28
 194:	f1 1d       	adc	r31, r1
 196:	80 81       	ld	r24, Z
 198:	81 11       	cpse	r24, r1
 19a:	f7 cf       	rjmp	.-18     	; 0x18a <LCD_String+0x12>
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <LCD_String_xy>:
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	ea 01       	movw	r28, r20
 1aa:	81 11       	cpse	r24, r1
 1ac:	08 c0       	rjmp	.+16     	; 0x1be <LCD_String_xy+0x1a>
 1ae:	60 31       	cpi	r22, 0x10	; 16
 1b0:	78 f4       	brcc	.+30     	; 0x1d0 <LCD_String_xy+0x2c>
 1b2:	86 2f       	mov	r24, r22
 1b4:	8f 70       	andi	r24, 0x0F	; 15
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 1bc:	09 c0       	rjmp	.+18     	; 0x1d0 <LCD_String_xy+0x2c>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	39 f4       	brne	.+14     	; 0x1d0 <LCD_String_xy+0x2c>
 1c2:	60 31       	cpi	r22, 0x10	; 16
 1c4:	28 f4       	brcc	.+10     	; 0x1d0 <LCD_String_xy+0x2c>
 1c6:	86 2f       	mov	r24, r22
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	80 6c       	ori	r24, 0xC0	; 192
 1cc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_String>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <LCD_CharPos>:
}

void LCD_CharPos(int data, unsigned row, unsigned pos)
{
 1dc:	cf 93       	push	r28
 1de:	c8 2f       	mov	r28, r24
	switch (row)
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	21 f0       	breq	.+8      	; 0x1ee <LCD_CharPos+0x12>
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	71 05       	cpc	r23, r1
 1ea:	51 f0       	breq	.+20     	; 0x200 <LCD_CharPos+0x24>
 1ec:	11 c0       	rjmp	.+34     	; 0x210 <LCD_CharPos+0x34>
	{
		case 0:
		LCD_Cmnd((0x80) | (pos & 0x0F));
 1ee:	84 2f       	mov	r24, r20
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
		LCD_Char(data);
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Char>
		break;
 1fe:	08 c0       	rjmp	.+16     	; 0x210 <LCD_CharPos+0x34>
		
		case 1:
		LCD_Cmnd((0xC0) | (pos & 0x0F));
 200:	84 2f       	mov	r24, r20
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	80 6c       	ori	r24, 0xC0	; 192
 206:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Cmnd>
		LCD_Char(data);
 20a:	8c 2f       	mov	r24, r28
 20c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Char>
		break;
	}
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <main>:


int main(void)
{
	
LCD_Init();
 214:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_Init>
UART_INit();
 218:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <UART_INit>
SPI_InitType InitData = {Master,MSB};
SPI_Init(InitData);
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 cd 01 	call	0x39a	; 0x39a <SPI_Init>
SPIPort &=~(1<<SS);
 224:	c4 98       	cbi	0x18, 4	; 24

LCD_String("hello-Abdo");
 226:	80 e6       	ldi	r24, 0x60	; 96
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 bc 00 	call	0x178	; 0x178 <LCD_String>
LCD_String_xy(1,0,"temperature: ");
 22e:	4b e6       	ldi	r20, 0x6B	; 107
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <LCD_String_xy>


	TCCR1B = (1<<CS12)|(1<<CS10)|(1<<WGM12); 
 23a:	8d e0       	ldi	r24, 0x0D	; 13
 23c:	8e bd       	out	0x2e, r24	; 46
	TIMSK = (1<<OCIE1A);
 23e:	80 e1       	ldi	r24, 0x10	; 16
 240:	89 bf       	out	0x39, r24	; 57
	TCCR1A = (1<<COM1A0);
 242:	80 e4       	ldi	r24, 0x40	; 64
 244:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 15625;
 246:	89 e0       	ldi	r24, 0x09	; 9
 248:	9d e3       	ldi	r25, 0x3D	; 61
 24a:	9b bd       	out	0x2b, r25	; 43
 24c:	8a bd       	out	0x2a, r24	; 42
	
	sei();
 24e:	78 94       	sei
	SPI_TransmitChar(0x44);
 250:	84 e4       	ldi	r24, 0x44	; 68
 252:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPI_TransmitChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	83 ec       	ldi	r24, 0xC3	; 195
 25a:	99 e0       	ldi	r25, 0x09	; 9
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x48>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x52>
 266:	00 00       	nop
	_delay_ms(200);
	x = SPI_Receive_Transmit(0x21);
 268:	81 e2       	ldi	r24, 0x21	; 33
 26a:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_Receive_Transmit>
 26e:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <x>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	83 ec       	ldi	r24, 0xC3	; 195
 276:	99 e0       	ldi	r25, 0x09	; 9
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x64>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x6e>
 282:	00 00       	nop
	_delay_ms(200);
	y = SPI_Receive_Transmit(0x22);
 284:	82 e2       	ldi	r24, 0x22	; 34
 286:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_Receive_Transmit>
 28a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <y>
	LCD_CharPos(x,1,12);
 28e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <x>
 292:	4c e0       	ldi	r20, 0x0C	; 12
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_CharPos>
	LCD_CharPos(y,1,13);
 2a0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <y>
 2a4:	4d e0       	ldi	r20, 0x0D	; 13
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_CharPos>

    while (1) 
    {	
		SPI_TransmitChar(UART_ReceiveChar()); //hb3at eldata mn elmaster
 2b2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <UART_ReceiveChar>
 2b6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPI_TransmitChar>
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	85 ea       	ldi	r24, 0xA5	; 165
 2be:	9e e0       	ldi	r25, 0x0E	; 14
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <main+0xac>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <main+0xb6>
 2ca:	00 00       	nop
 2cc:	f2 cf       	rjmp	.-28     	; 0x2b2 <main+0x9e>

000002ce <__vector_7>:
    }
}


ISR(TIMER1_COMPA_vect)
{
 2ce:	1f 92       	push	r1
 2d0:	0f 92       	push	r0
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	0f 92       	push	r0
 2d6:	11 24       	eor	r1, r1
 2d8:	2f 93       	push	r18
 2da:	3f 93       	push	r19
 2dc:	4f 93       	push	r20
 2de:	5f 93       	push	r21
 2e0:	6f 93       	push	r22
 2e2:	7f 93       	push	r23
 2e4:	8f 93       	push	r24
 2e6:	9f 93       	push	r25
 2e8:	af 93       	push	r26
 2ea:	bf 93       	push	r27
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	cnt++;
 2f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 2f4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 2f8:	01 96       	adiw	r24, 0x01	; 1
 2fa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 2fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
	if (cnt > 9)
 302:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 306:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 30a:	0a 97       	sbiw	r24, 0x0a	; 10
 30c:	a8 f1       	brcs	.+106    	; 0x378 <__vector_7+0xaa>
	{
		SPI_TransmitChar(0x44);
 30e:	84 e4       	ldi	r24, 0x44	; 68
 310:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPI_TransmitChar>
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	83 ec       	ldi	r24, 0xC3	; 195
 318:	99 e0       	ldi	r25, 0x09	; 9
 31a:	21 50       	subi	r18, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <__vector_7+0x4c>
 322:	00 c0       	rjmp	.+0      	; 0x324 <__vector_7+0x56>
 324:	00 00       	nop
		_delay_ms(200);
		x = SPI_Receive_Transmit(0x21);
 326:	81 e2       	ldi	r24, 0x21	; 33
 328:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_Receive_Transmit>
 32c:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <x>
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	83 ec       	ldi	r24, 0xC3	; 195
 334:	99 e0       	ldi	r25, 0x09	; 9
 336:	21 50       	subi	r18, 0x01	; 1
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	90 40       	sbci	r25, 0x00	; 0
 33c:	e1 f7       	brne	.-8      	; 0x336 <__vector_7+0x68>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <__vector_7+0x72>
 340:	00 00       	nop
		_delay_ms(200);
		y = SPI_Receive_Transmit(0x22);
 342:	82 e2       	ldi	r24, 0x22	; 34
 344:	0e 94 df 01 	call	0x3be	; 0x3be <SPI_Receive_Transmit>
 348:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <y>
		cnt = 0;
 34c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__data_end+0x1>
 350:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
		LCD_CharPos(x,1,12);
 354:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <x>
 358:	4c e0       	ldi	r20, 0x0C	; 12
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_CharPos>
		LCD_CharPos(y,1,13);
 366:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <y>
 36a:	4d e0       	ldi	r20, 0x0D	; 13
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 ee 00 	call	0x1dc	; 0x1dc <LCD_CharPos>
	}
}
 378:	ff 91       	pop	r31
 37a:	ef 91       	pop	r30
 37c:	bf 91       	pop	r27
 37e:	af 91       	pop	r26
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	7f 91       	pop	r23
 386:	6f 91       	pop	r22
 388:	5f 91       	pop	r21
 38a:	4f 91       	pop	r20
 38c:	3f 91       	pop	r19
 38e:	2f 91       	pop	r18
 390:	0f 90       	pop	r0
 392:	0f be       	out	0x3f, r0	; 63
 394:	0f 90       	pop	r0
 396:	1f 90       	pop	r1
 398:	18 95       	reti

0000039a <SPI_Init>:

#include "SPI.h"

void SPI_Init(SPI_InitType status)
{
	switch (status.state)
 39a:	88 23       	and	r24, r24
 39c:	19 f0       	breq	.+6      	; 0x3a4 <SPI_Init+0xa>
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	51 f0       	breq	.+20     	; 0x3b6 <SPI_Init+0x1c>
 3a2:	08 95       	ret
	{
		case Master:
		SPIDir |= (1<<SS)|(1<<MOSI)|(1<<SCK);
 3a4:	87 b3       	in	r24, 0x17	; 23
 3a6:	80 6b       	ori	r24, 0xB0	; 176
 3a8:	87 bb       	out	0x17, r24	; 23
		SPIDir &=~(1<<MISO);
 3aa:	be 98       	cbi	0x17, 6	; 23
		SPIPort|=(1<<SS);
 3ac:	c4 9a       	sbi	0x18, 4	; 24
		SPCR |= (1<<MSTR)|(1<<SPE)|(1<<SPR1);
 3ae:	8d b1       	in	r24, 0x0d	; 13
 3b0:	82 65       	ori	r24, 0x52	; 82
 3b2:	8d b9       	out	0x0d, r24	; 13
		break;
 3b4:	08 95       	ret
		
		case Slave:
		SPIDir &=~ (1<<SS)|(1<<MOSI)|(1<<SCK);
 3b6:	bc 98       	cbi	0x17, 4	; 23
		SPIDir |=(1<<MISO);
 3b8:	be 9a       	sbi	0x17, 6	; 23
		SPCR |=(1<<SPE);
 3ba:	6e 9a       	sbi	0x0d, 6	; 13
 3bc:	08 95       	ret

000003be <SPI_Receive_Transmit>:
	}
}

unsigned char SPI_Receive_Transmit(unsigned char data)
{
	SPDR = data;
 3be:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR &(1<<SPIF)));
 3c0:	77 9b       	sbis	0x0e, 7	; 14
 3c2:	fe cf       	rjmp	.-4      	; 0x3c0 <SPI_Receive_Transmit+0x2>
	return SPDR;
 3c4:	8f b1       	in	r24, 0x0f	; 15
	
}
 3c6:	08 95       	ret

000003c8 <SPI_TransmitChar>:

void SPI_TransmitChar(unsigned char data)
{
	SPDR = data;
 3c8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 3ca:	77 9b       	sbis	0x0e, 7	; 14
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <SPI_TransmitChar+0x2>
	
}
 3ce:	08 95       	ret

000003d0 <UART_INit>:
	UBRRH = (MyUBRR>>8);
}
void UART_SendChar(char data)
{
	while(!(UCSRA & (1<<UDRE)));
	data = UDR ;
 3d0:	88 e1       	ldi	r24, 0x18	; 24
 3d2:	8a b9       	out	0x0a, r24	; 10
 3d4:	86 e8       	ldi	r24, 0x86	; 134
 3d6:	80 bd       	out	0x20, r24	; 32
 3d8:	87 e6       	ldi	r24, 0x67	; 103
 3da:	89 b9       	out	0x09, r24	; 9
 3dc:	10 bc       	out	0x20, r1	; 32
 3de:	08 95       	ret

000003e0 <UART_ReceiveChar>:
}

unsigned char UART_ReceiveChar(void)
{
	while((UCSRA & (1<<RXC))==0);
 3e0:	5f 9b       	sbis	0x0b, 7	; 11
 3e2:	fe cf       	rjmp	.-4      	; 0x3e0 <UART_ReceiveChar>
	return UDR;
 3e4:	8c b1       	in	r24, 0x0c	; 12
}
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
