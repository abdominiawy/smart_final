
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  000003fc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001145  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ae  00000000  00000000  0000175d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e8  00000000  00000000  0000210b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000029f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004b6  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ec  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003616  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 19 01 	call	0x232	; 0x232 <main>
  7a:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "ADC.h"


void ADC_Init()
{
	ADMUX |= (1<<REFS0)|(1<<REFS1);
  82:	87 b1       	in	r24, 0x07	; 7
  84:	80 6c       	ori	r24, 0xC0	; 192
  86:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(ADPS1)|(ADPS2)|(1<<ADIE);
  88:	86 b1       	in	r24, 0x06	; 6
  8a:	8b 6a       	ori	r24, 0xAB	; 171
  8c:	86 b9       	out	0x06, r24	; 6
  8e:	08 95       	ret

00000090 <ADC_Read>:
}

unsigned int ADC_Read(unsigned char channel)
{
	unsigned int result=0;
	ADMUX |=((1<<REFS0) |(1<<REFS1)) | (channel & 0x07);
  90:	97 b1       	in	r25, 0x07	; 7
  92:	87 70       	andi	r24, 0x07	; 7
  94:	90 6c       	ori	r25, 0xC0	; 192
  96:	89 2b       	or	r24, r25
  98:	87 b9       	out	0x07, r24	; 7
	//start conversion
	ADCSRA |= (1<<ADSC);
  9a:	36 9a       	sbi	0x06, 6	; 6
	//check on ADIF flag
	while (!(ADCSRA & (1<<ADIF)));
  9c:	34 9b       	sbis	0x06, 4	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <ADC_Read+0xc>
	ADCSRA |= (1<<ADIF);
  a0:	34 9a       	sbi	0x06, 4	; 6
	//get results
	result = ADCL;
  a2:	84 b1       	in	r24, 0x04	; 4
	result |= (ADCH<<8); //ADCH (2bits) | ADCL (8bits)
  a4:	25 b1       	in	r18, 0x05	; 5
	return result;
  a6:	90 e0       	ldi	r25, 0x00	; 0
}
  a8:	92 2b       	or	r25, r18
  aa:	08 95       	ret

000000ac <DC_Motor_Init>:

#include "DC_MOTOR.h"

void DC_Motor_Init()
{
	DDRC |= (1<<4) | (1<<5) ;
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	80 63       	ori	r24, 0x30	; 48
  b0:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1<<5);
  b2:	8d 9a       	sbi	0x11, 5	; 17
	OCR1A = 200;
  b4:	88 ec       	ldi	r24, 0xC8	; 200
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
	TCCR1A = (1<<WGM10) | (1<<COM1A1);
  bc:	81 e8       	ldi	r24, 0x81	; 129
  be:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);	
  c0:	8b e0       	ldi	r24, 0x0B	; 11
  c2:	8e bd       	out	0x2e, r24	; 46
  c4:	08 95       	ret

000000c6 <DC_Motor_Direction>:
}

void DC_Motor_Direction(unsigned char Direction)
{
	switch (Direction)
  c6:	83 35       	cpi	r24, 0x53	; 83
  c8:	29 f0       	breq	.+10     	; 0xd4 <DC_Motor_Direction+0xe>
  ca:	87 35       	cpi	r24, 0x57	; 87
  cc:	29 f4       	brne	.+10     	; 0xd8 <DC_Motor_Direction+0x12>
	{
		case'W':
		PORTC |= (1<<4);
  ce:	ac 9a       	sbi	0x15, 4	; 21
		PORTC &=~(1<<5);
  d0:	ad 98       	cbi	0x15, 5	; 21
		break;
  d2:	08 95       	ret
		
		case'S':
		PORTC |= (1<<5);
  d4:	ad 9a       	sbi	0x15, 5	; 21
		PORTC &=~(1<<4);		
  d6:	ac 98       	cbi	0x15, 4	; 21
  d8:	08 95       	ret

000000da <LCD_cmnd>:
	LCD_cmnd(0x01);	
}

void LCD_cmnd(unsigned char cmnd)
{
	LCD_Port =(LCD_Port&0x0F) | (cmnd&0xF0);
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	28 2f       	mov	r18, r24
  e0:	20 7f       	andi	r18, 0xF0	; 240
  e2:	92 2b       	or	r25, r18
  e4:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control &=~(1<<RS);
  e6:	c1 98       	cbi	0x18, 1	; 24
	LCD_Port_Control |=(1<<EN);
  e8:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	35 e3       	ldi	r19, 0x35	; 53
  ec:	3a 95       	dec	r19
  ee:	f1 f7       	brne	.-4      	; 0xec <LCD_cmnd+0x12>
  f0:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &=~(1<<EN);
  f2:	c3 98       	cbi	0x18, 3	; 24
  f4:	ef e3       	ldi	r30, 0x3F	; 63
  f6:	ff e1       	ldi	r31, 0x1F	; 31
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_cmnd+0x1e>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_cmnd+0x24>
  fe:	00 00       	nop
	
	_delay_us(2000);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);
 100:	2b b3       	in	r18, 0x1b	; 27
 102:	2f 70       	andi	r18, 0x0F	; 15
 104:	f0 e1       	ldi	r31, 0x10	; 16
 106:	8f 9f       	mul	r24, r31
 108:	c0 01       	movw	r24, r0
 10a:	11 24       	eor	r1, r1
 10c:	82 2b       	or	r24, r18
 10e:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |= (1<<EN);
 110:	c3 9a       	sbi	0x18, 3	; 24
 112:	35 e3       	ldi	r19, 0x35	; 53
 114:	3a 95       	dec	r19
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_cmnd+0x3a>
 118:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &=~(1<<EN);
 11a:	c3 98       	cbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_cmnd+0x46>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_cmnd+0x4c>
 126:	00 00       	nop
 128:	08 95       	ret

0000012a <LCD_Init>:


void LCD_Init()
{
	//Direction of Data Pins 
	LCD_Dir |= 0xF0 ;//A4 to A7 are output
 12a:	8a b3       	in	r24, 0x1a	; 26
 12c:	80 6f       	ori	r24, 0xF0	; 240
 12e:	8a bb       	out	0x1a, r24	; 26
	LCD_Dir_Control |=(1<<RS)|(1<<RW)|(1<<EN); //Direction of control pins are output
 130:	87 b3       	in	r24, 0x17	; 23
 132:	8e 60       	ori	r24, 0x0E	; 14
 134:	87 bb       	out	0x17, r24	; 23
	LCD_Port_Control &=~(1<<RW);
 136:	c2 98       	cbi	0x18, 2	; 24
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 ef       	ldi	r24, 0xF9	; 249
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <LCD_Init+0x14>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_Init+0x1e>
 148:	00 00       	nop
	_delay_ms(20);
	LCD_cmnd(0x33);
 14a:	83 e3       	ldi	r24, 0x33	; 51
 14c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
	LCD_cmnd(0x32);
 150:	82 e3       	ldi	r24, 0x32	; 50
 152:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
	LCD_cmnd(0x28);
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
	LCD_cmnd(0x0c);
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
	LCD_cmnd(0x06);
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
	LCD_cmnd(0x01);	
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
 16e:	08 95       	ret

00000170 <LCD_Char>:
	
}

void LCD_Char(unsigned char data)
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);
 170:	9b b3       	in	r25, 0x1b	; 27
 172:	9f 70       	andi	r25, 0x0F	; 15
 174:	28 2f       	mov	r18, r24
 176:	20 7f       	andi	r18, 0xF0	; 240
 178:	92 2b       	or	r25, r18
 17a:	9b bb       	out	0x1b, r25	; 27
	LCD_Port_Control |=(1<<RS);
 17c:	c1 9a       	sbi	0x18, 1	; 24
	LCD_Port_Control |=(1<<EN);
 17e:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	35 e3       	ldi	r19, 0x35	; 53
 182:	3a 95       	dec	r19
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Char+0x12>
 186:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &=~(1<<EN);
 188:	c3 98       	cbi	0x18, 3	; 24
 18a:	ef e3       	ldi	r30, 0x3F	; 63
 18c:	ff e1       	ldi	r31, 0x1F	; 31
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_Char+0x1e>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_Char+0x24>
 194:	00 00       	nop
	_delay_us(2000);
	
	LCD_Port = (LCD_Port & 0x0F) | (data << 4 );
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	2f 70       	andi	r18, 0x0F	; 15
 19a:	f0 e1       	ldi	r31, 0x10	; 16
 19c:	8f 9f       	mul	r24, r31
 19e:	c0 01       	movw	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	82 2b       	or	r24, r18
 1a4:	8b bb       	out	0x1b, r24	; 27
	LCD_Port_Control |=(1<<EN);
 1a6:	c3 9a       	sbi	0x18, 3	; 24
 1a8:	35 e3       	ldi	r19, 0x35	; 53
 1aa:	3a 95       	dec	r19
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Char+0x3a>
 1ae:	00 00       	nop
	_delay_us(10);
	LCD_Port_Control &=~(1<<EN);
 1b0:	c3 98       	cbi	0x18, 3	; 24
 1b2:	08 95       	ret

000001b4 <LCD_String>:
	
}

void  LCD_String(char* str)
{
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	fc 01       	movw	r30, r24
	char i=0;
	while(str[i]!='\0')
 1bc:	80 81       	ld	r24, Z
 1be:	88 23       	and	r24, r24
 1c0:	59 f0       	breq	.+22     	; 0x1d8 <LCD_String+0x24>
 1c2:	8f 01       	movw	r16, r30
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
	{
			LCD_Char(str[i]);
 1c6:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Char>
			i++;
 1ca:	cf 5f       	subi	r28, 0xFF	; 255
}

void  LCD_String(char* str)
{
	char i=0;
	while(str[i]!='\0')
 1cc:	f8 01       	movw	r30, r16
 1ce:	ec 0f       	add	r30, r28
 1d0:	f1 1d       	adc	r31, r1
 1d2:	80 81       	ld	r24, Z
 1d4:	81 11       	cpse	r24, r1
 1d6:	f7 cf       	rjmp	.-18     	; 0x1c6 <LCD_String+0x12>
	{
			LCD_Char(str[i]);
			i++;
	}
}
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	08 95       	ret

000001e0 <LCD_String_xy>:

void LCD_String_xy(char row,char pos,char* str)
{
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ea 01       	movw	r28, r20
	if (row==0 && pos<16)
 1e6:	81 11       	cpse	r24, r1
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <LCD_String_xy+0x1a>
 1ea:	60 31       	cpi	r22, 0x10	; 16
 1ec:	78 f4       	brcc	.+30     	; 0x20c <LCD_String_xy+0x2c>
	LCD_cmnd((pos&0x0F)|0x80);
 1ee:	86 2f       	mov	r24, r22
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <LCD_String_xy+0x2c>
	else if (row==1 && pos<16)
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	39 f4       	brne	.+14     	; 0x20c <LCD_String_xy+0x2c>
 1fe:	60 31       	cpi	r22, 0x10	; 16
 200:	28 f4       	brcc	.+10     	; 0x20c <LCD_String_xy+0x2c>
	LCD_cmnd((pos&0x0F)|0xc0);
 202:	86 2f       	mov	r24, r22
 204:	8f 70       	andi	r24, 0x0F	; 15
 206:	80 6c       	ori	r24, 0xC0	; 192
 208:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
	LCD_String(str);
 20c:	ce 01       	movw	r24, r28
 20e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_String>
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_clear>:

void LCD_clear()
{
	LCD_cmnd(0x01);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
 21e:	8f e3       	ldi	r24, 0x3F	; 63
 220:	9f e1       	ldi	r25, 0x1F	; 31
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCD_clear+0xa>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCD_clear+0x10>
 228:	00 00       	nop
	_delay_us(2000);
	LCD_cmnd(0x80);
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	0e 94 6d 00 	call	0xda	; 0xda <LCD_cmnd>
 230:	08 95       	ret

00000232 <main>:
#include <avr/io.h>
#include <stdio.h>


int main(void)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <main+0x6>
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
LCD_Init();
 23c:	0e 94 95 00 	call	0x12a	; 0x12a <LCD_Init>
ADC_Init();
 240:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
DC_Motor_Init();
 244:	0e 94 56 00 	call	0xac	; 0xac <DC_Motor_Init>

DDRC |= (1<<6);
 248:	a6 9a       	sbi	0x14, 6	; 20

SPI_InitType InitData = {Slave, MSB};
SPI_Init(InitData);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 9f 01 	call	0x33e	; 0x33e <SPI_Init>


    while (1) 
    {
	
		cmd = SPI_ReceiveChar(); //Receive Command from Master
 252:	0e 94 b8 01 	call	0x370	; 0x370 <SPI_ReceiveChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f ef       	ldi	r18, 0xFF	; 255
 258:	31 ee       	ldi	r19, 0xE1	; 225
 25a:	94 e0       	ldi	r25, 0x04	; 4
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x2a>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x34>
 266:	00 00       	nop
		_delay_ms(100);
		
		switch(cmd)
 268:	83 33       	cpi	r24, 0x33	; 51
 26a:	d9 f0       	breq	.+54     	; 0x2a2 <main+0x70>
 26c:	28 f4       	brcc	.+10     	; 0x278 <main+0x46>
 26e:	81 33       	cpi	r24, 0x31	; 49
 270:	41 f0       	breq	.+16     	; 0x282 <main+0x50>
 272:	82 33       	cpi	r24, 0x32	; 50
 274:	71 f0       	breq	.+28     	; 0x292 <main+0x60>
 276:	ed cf       	rjmp	.-38     	; 0x252 <main+0x20>
 278:	84 33       	cpi	r24, 0x34	; 52
 27a:	29 f1       	breq	.+74     	; 0x2c6 <main+0x94>
 27c:	84 34       	cpi	r24, 0x44	; 68
 27e:	a9 f1       	breq	.+106    	; 0x2ea <main+0xb8>
 280:	e8 cf       	rjmp	.-48     	; 0x252 <main+0x20>
		{
			case '1':
			PORTC |=(1<<6);
 282:	ae 9a       	sbi	0x15, 6	; 21
			LCD_clear();
 284:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clear>
			LCD_String("Light ON");
 288:	80 e6       	ldi	r24, 0x60	; 96
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_String>
			break;
 290:	e0 cf       	rjmp	.-64     	; 0x252 <main+0x20>
			
			case '2':
			PORTC &=~(1<<6);
 292:	ae 98       	cbi	0x15, 6	; 21
			LCD_clear();
 294:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clear>
			LCD_String("Light OFF");
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_String>
			break;
 2a0:	d8 cf       	rjmp	.-80     	; 0x252 <main+0x20>
			
			case '3':
			DC_Motor_Direction('W');
 2a2:	87 e5       	ldi	r24, 0x57	; 87
 2a4:	0e 94 63 00 	call	0xc6	; 0xc6 <DC_Motor_Direction>
			LCD_clear();
 2a8:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clear>
			LCD_String_xy(0,1,"DC Motor ON");
 2ac:	43 e7       	ldi	r20, 0x73	; 115
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_String_xy>
			LCD_String_xy(0,2,"Forward Dir");;
 2b8:	4f e7       	ldi	r20, 0x7F	; 127
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	62 e0       	ldi	r22, 0x02	; 2
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_String_xy>
			break;
 2c4:	c6 cf       	rjmp	.-116    	; 0x252 <main+0x20>
			
			case '4':
			DC_Motor_Direction('S');
 2c6:	83 e5       	ldi	r24, 0x53	; 83
 2c8:	0e 94 63 00 	call	0xc6	; 0xc6 <DC_Motor_Direction>
			LCD_clear();
 2cc:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clear>
			LCD_String_xy(0,1,"DC Motor ON");
 2d0:	43 e7       	ldi	r20, 0x73	; 115
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_String_xy>
			LCD_String_xy(0,2,"Backward Dir");
 2dc:	4b e8       	ldi	r20, 0x8B	; 139
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_String_xy>
			break;
 2e8:	b4 cf       	rjmp	.-152    	; 0x252 <main+0x20>
			
			case 0x44:
				adc_value = ADC_Read(0);
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Read>
				adc_value /= 4;			
			    itoa(adc_value,buffer,10);
 2f0:	4a e0       	ldi	r20, 0x0A	; 10
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	be 01       	movw	r22, r28
 2f6:	6f 5f       	subi	r22, 0xFF	; 255
 2f8:	7f 4f       	sbci	r23, 0xFF	; 255
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	0e 94 bc 01 	call	0x378	; 0x378 <itoa>
				
			if (SPI_receive_Transmit(buffer[0]) == 0x21)
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	0e 94 b3 01 	call	0x366	; 0x366 <SPI_receive_Transmit>
 30c:	81 32       	cpi	r24, 0x21	; 33
 30e:	71 f4       	brne	.+28     	; 0x32c <main+0xfa>
			{
				LCD_clear();
 310:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clear>
				LCD_String_xy(0,0,"Reading");
 314:	48 e9       	ldi	r20, 0x98	; 152
 316:	50 e0       	ldi	r21, 0x00	; 0
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_String_xy>
				LCD_String_xy(1,0,"Temperature");
 320:	40 ea       	ldi	r20, 0xA0	; 160
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <LCD_String_xy>
				
			}
			if (SPI_receive_Transmit(buffer[1]) == 0x22)
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	0e 94 b3 01 	call	0x366	; 0x366 <SPI_receive_Transmit>
 332:	82 32       	cpi	r24, 0x22	; 34
 334:	09 f0       	breq	.+2      	; 0x338 <main+0x106>
 336:	8d cf       	rjmp	.-230    	; 0x252 <main+0x20>
			 LCD_clear();
 338:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_clear>
 33c:	8a cf       	rjmp	.-236    	; 0x252 <main+0x20>

0000033e <SPI_Init>:

void SPI_TransmitChar(unsigned char Data)
{
	SPDR = Data;
	while(!(SPSR & (1<<SPIF)));
}
 33e:	88 23       	and	r24, r24
 340:	19 f0       	breq	.+6      	; 0x348 <SPI_Init+0xa>
 342:	81 30       	cpi	r24, 0x01	; 1
 344:	51 f0       	breq	.+20     	; 0x35a <SPI_Init+0x1c>
 346:	08 95       	ret
 348:	87 b3       	in	r24, 0x17	; 23
 34a:	80 6b       	ori	r24, 0xB0	; 176
 34c:	87 bb       	out	0x17, r24	; 23
 34e:	be 98       	cbi	0x17, 6	; 23
 350:	c4 9a       	sbi	0x18, 4	; 24
 352:	8d b1       	in	r24, 0x0d	; 13
 354:	80 65       	ori	r24, 0x50	; 80
 356:	8d b9       	out	0x0d, r24	; 13
 358:	08 95       	ret
 35a:	bc 98       	cbi	0x17, 4	; 23
 35c:	be 9a       	sbi	0x17, 6	; 23
 35e:	8d b1       	in	r24, 0x0d	; 13
 360:	82 64       	ori	r24, 0x42	; 66
 362:	8d b9       	out	0x0d, r24	; 13
 364:	08 95       	ret

00000366 <SPI_receive_Transmit>:
 366:	8f b9       	out	0x0f, r24	; 15
 368:	77 9b       	sbis	0x0e, 7	; 14
 36a:	fe cf       	rjmp	.-4      	; 0x368 <SPI_receive_Transmit+0x2>
 36c:	8f b1       	in	r24, 0x0f	; 15
 36e:	08 95       	ret

00000370 <SPI_ReceiveChar>:

unsigned char SPI_ReceiveChar(void)
{
	while (!(SPSR & (1<<SPIF)));
 370:	77 9b       	sbis	0x0e, 7	; 14
 372:	fe cf       	rjmp	.-4      	; 0x370 <SPI_ReceiveChar>
	return SPDR;
 374:	8f b1       	in	r24, 0x0f	; 15
	
 376:	08 95       	ret

00000378 <itoa>:
 378:	45 32       	cpi	r20, 0x25	; 37
 37a:	51 05       	cpc	r21, r1
 37c:	20 f4       	brcc	.+8      	; 0x386 <itoa+0xe>
 37e:	42 30       	cpi	r20, 0x02	; 2
 380:	10 f0       	brcs	.+4      	; 0x386 <itoa+0xe>
 382:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__itoa_ncheck>
 386:	fb 01       	movw	r30, r22
 388:	10 82       	st	Z, r1
 38a:	cb 01       	movw	r24, r22
 38c:	08 95       	ret

0000038e <__itoa_ncheck>:
 38e:	bb 27       	eor	r27, r27
 390:	4a 30       	cpi	r20, 0x0A	; 10
 392:	31 f4       	brne	.+12     	; 0x3a0 <__itoa_ncheck+0x12>
 394:	99 23       	and	r25, r25
 396:	22 f4       	brpl	.+8      	; 0x3a0 <__itoa_ncheck+0x12>
 398:	bd e2       	ldi	r27, 0x2D	; 45
 39a:	90 95       	com	r25
 39c:	81 95       	neg	r24
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__utoa_common>

000003a4 <__utoa_ncheck>:
 3a4:	bb 27       	eor	r27, r27

000003a6 <__utoa_common>:
 3a6:	fb 01       	movw	r30, r22
 3a8:	55 27       	eor	r21, r21
 3aa:	aa 27       	eor	r26, r26
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	aa 1f       	adc	r26, r26
 3b2:	a4 17       	cp	r26, r20
 3b4:	10 f0       	brcs	.+4      	; 0x3ba <__utoa_common+0x14>
 3b6:	a4 1b       	sub	r26, r20
 3b8:	83 95       	inc	r24
 3ba:	50 51       	subi	r21, 0x10	; 16
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <__utoa_common+0x6>
 3be:	a0 5d       	subi	r26, 0xD0	; 208
 3c0:	aa 33       	cpi	r26, 0x3A	; 58
 3c2:	08 f0       	brcs	.+2      	; 0x3c6 <__utoa_common+0x20>
 3c4:	a9 5d       	subi	r26, 0xD9	; 217
 3c6:	a1 93       	st	Z+, r26
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	79 f7       	brne	.-34     	; 0x3aa <__utoa_common+0x4>
 3cc:	b1 11       	cpse	r27, r1
 3ce:	b1 93       	st	Z+, r27
 3d0:	11 92       	st	Z+, r1
 3d2:	cb 01       	movw	r24, r22
 3d4:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <strrev>

000003d8 <strrev>:
 3d8:	dc 01       	movw	r26, r24
 3da:	fc 01       	movw	r30, r24
 3dc:	67 2f       	mov	r22, r23
 3de:	71 91       	ld	r23, Z+
 3e0:	77 23       	and	r23, r23
 3e2:	e1 f7       	brne	.-8      	; 0x3dc <strrev+0x4>
 3e4:	32 97       	sbiw	r30, 0x02	; 2
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <strrev+0x18>
 3e8:	7c 91       	ld	r23, X
 3ea:	6d 93       	st	X+, r22
 3ec:	70 83       	st	Z, r23
 3ee:	62 91       	ld	r22, -Z
 3f0:	ae 17       	cp	r26, r30
 3f2:	bf 07       	cpc	r27, r31
 3f4:	c8 f3       	brcs	.-14     	; 0x3e8 <strrev+0x10>
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
